@import 'font';

$banner-height: 5px;

$checkout-header-height: 55px;

$black: rgb(0, 0, 0);
$black-hover: rgb(66, 66, 66);
$black-text-primary: rgb(0, 0, 0);
$black-text-secondary: rgb(51, 47, 47);
$grey-dark: rgb(29, 30, 34);
$grey-medium: rgb(123, 123, 123);
$grey-light-primary: rgb(246, 247, 248);
$grey-light-secondary: rgb(237, 238, 239);
$white: rgb(255, 255, 255);
$white-hover: rgb(199, 199, 199);
$white-text-primary: rgb(237, 240, 242);
$white-text-secondary: rgb(188, 190, 191);
$red-primary: rgb(244, 92, 67);
$red-secondary: lighten($red-primary, 30%);
$red-secondary-text: rgb(223, 58, 46);
$red-gradient: rgb(252, 70, 107);
$blue-gradient: rgb(63, 94, 251);

$button-padding: 0.5rem;
$button-border-radius: 0.3em;

$transition: 150ms ease;

$typography: (
  headline: (
    font-size: 2rem,
    font-weight: 500,
    line-height: 1.2,
  ),
  title: (
    font-size: 1.5rem,
    font-weight: 400,
    line-height: 1.2,
  ),
  subheading-2: (
    font-size: 1.35rem,
    font-weight: 400,
    line-height: 1.2,
  ),
  body-1: (
    font-size: 1.1rem,
    font-weight: 400,
    line-height: 1.4,
  ),
);

@mixin padding-menu($arg: 'padding') {
  #{$arg}-left: $padding-xs;
  #{$arg}-right: $padding-xs;

  @include sm {
    #{$arg}-left: $padding-sm;
    #{$arg}-right: $padding-sm;
  }
  @include md {
    #{$arg}-left: $padding-md;
    #{$arg}-right: $padding-md;
  }
  @include lg {
    #{$arg}-left: 3vw;
    #{$arg}-right: 3vw;
  }

  :host-context(.products) {
    @include lg {
      #{$arg}-left: 0;
      #{$arg}-right: 0;
    }
  }
}

@mixin padding-menu-inner($arg: 'padding') {
  padding-left: $padding-xs;
  padding-right: $padding-xs;

  @include sm {
    padding-left: $padding-sm;
    padding-right: $padding-sm;
  }

  @include md {
    padding-left: $padding-sm * 1.5;
    padding-right: $padding-sm * 1.5;
  }

  @include xl {
    padding-left: $padding-sm * 2;
    padding-right: $padding-sm * 2;
  }
}

@mixin desktop {
  @include lg {
    @content;
  }
}

@mixin hover {
  &:hover,
  &:active {
    outline: none;
    @content;
  }
}

@mixin hoverScale($hoverSize, $activeSize) {
  @if ($activeSize > $hoverSize) {
    @error 'Animation should scale up on hover and scale down on active';
  }

  transition: transform $transition;

  @include hover {
    transform: scale($hoverSize);
  }
  &:active {
    transform: scale($activeSize);
  }
}

@mixin font($size) {
  $styles: map-get($typography, $size);

  font-size: map-get($styles, font-size);
  font-weight: map-get($styles, font-weight);
  line-height: map-get($styles, line-height);
}

%button {
  margin: 0.5em 0;
  padding: $button-padding;
  border-radius: $button-border-radius;
}

%shimmer {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  height: 100%;
  width: calc(100vw + 100%);
  background: linear-gradient(
    to right,
    $grey-light-primary 0%,
    $grey-light-primary 30%,
    $grey-light-secondary 50%,
    $grey-light-primary 70%,
    $grey-light-primary 100%
  );
  animation: shimmer 1s linear infinite forwards;
}

@mixin emptyImageDimensions {
  height: 100%;
}

@mixin emptyImageSlideDimensions {
  @include slideHeight;
  width: 70vw;

  @include sm {
    width: 70vw;
  }
  @include desktop {
    width: 50vw;
  }
}

@mixin menuDimensions {
  flex-shrink: 0;
  height: auto;

  &:not(:empty) {
    flex-grow: 1000;
  }

  @include desktop {
    flex-grow: 0 !important;
    height: 100vh;
    width: calc(100vw - var(--width, 100vw));
  }
}

@mixin slideHeight($arg: 'height') {
  #{$arg}: var(--height, 55vh);
  margin-top: 5vh;
  margin-bottom: 5vh;

  @include desktop {
    #{$arg}: var(--height, 90vh);
    margin-top: 0;
    margin-bottom: 0;
  }
}

@mixin slideWidth {
  min-width: calc(var(--width, 100vw) * 0.6);
  max-width: var(--width, 100vw);

  @at-root :host(#selected) {
    width: var(--width, 100vw);
    transition: width 0.3s cubic-bezier(0.215, 0.61, 0.355, 1);
  }

  @include sm {
    padding: 0 2vw;

    &:first-of-type {
      padding-left: 4vw;
    }
    &:last-of-type {
      padding-right: 4vw;
    }

    @at-root :host(#selected) {
      width: calc(var(--width, 100vw) - 20vw);

      &:only-child {
        width: var(--width, 100vw);
      }
    }
  }
}

@mixin innerButtonBackground($color) {
  background: rgba(darken($color, 25%), 0.2);
}

@mixin boxShadow($colour) {
  box-shadow: 0 0 1px 1px rgba($colour, 0.1);
}

@mixin closeButton($size, $colour, $hoverColour) {
  width: $size;
  height: $size;

  &::before,
  &::after {
    content: ' ';
    position: absolute;
    top: 0;
    bottom: 0;
    left: $size * 0.5;
    height: $size;
    width: 2px;
    background-color: $colour;
    transition: background-color $transition;
  }
  &::before {
    transform: rotate(45deg);
  }
  &::after {
    transform: rotate(-45deg);
  }

  @include hover {
    &::before,
    &::after {
      background-color: $hoverColour;
    }
  }
}

@mixin arrowButton($length, $thickness, $right, $colour, $hoverColour) {
  position: relative;

  &::after {
    content: '';
    display: block;
    position: absolute;
    top: -$length * 0.5;
    right: $right;
    bottom: 0;
    width: $length;
    height: $length;
    margin: auto 0;
    border-style: solid;
    border-color: $colour;
    border-width: 0 $thickness $thickness 0;
    transform: rotate(45deg);
    transition: border-color $transition;
  }

  @include hover {
    &::after {
      border-color: $hoverColour;
    }
  }
}

@mixin arrow($length, $thickness) {
  display: inline-block;
  position: relative;
  vertical-align: middle;
  width: 15px;
  height: 15px;
  margin-left: 1em;
  color: $white;
  border-width: $thickness $thickness 0 0;
  border-style: solid;
  transform: rotate(45deg);

  &::before {
    content: '';
    position: absolute;
    right: 0;
    top: -$thickness;
    height: $thickness;
    width: $length;
    box-shadow: inset 0 0 0 $length;
    transform: rotate(-45deg);
    transform-origin: right top;
  }
}

@mixin enterLeaveScale {
  transform: scale(0);
  animation: enterScale 0.7s linear forwards;

  &.ng-animating {
    animation: leaveScale 0.7s linear forwards;
  }
}
